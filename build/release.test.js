/*!
 * Graph.
 * https://www.github.com/ryansmith94/Graph
 *
 * Copyright 2013, Ryan Smith and contributors.
 * Released under the CC BY-NC-SA 3.0 license.
 * http://creativecommons.org/licenses/by-nc-sa/3.0/
 *
 * 2013-06-09, 20:03.
*/
!function(a,b){"use strict";var c=function(){var a=this,c=0,d=0;return a.logSuccess=!1,a.equal=function(e,f,g){c+=1,e!==f?(d+=1,b.warn("Test "+c+" failed."+(g?" "+g+" was not successful.":""))):a.logSuccess&&b.log("Test "+c+" passed."+(g?" "+g+" was succesful.":""))},a.passed=function(){return c-d},a.failed=function(){return d},a.tests=function(){return c},a.toString=function(){return c-d+"/"+c+" tests were passed."},a.result=function(){return b[0===d?"log":"warn"](a.toString()),0===d},a};a.assert=function(){return new c}}(this,this.console),function(a,b){"use strict";var c=b(),d={a:[],b:[]},e={a:[],b:[],test:10},f={a:[],b:[]};return a([],{parentsKey:"a",childrenKey:"b"}),c.equal(!!a().addChildren,!0,"Find addChildren function"),c.equal(!!a().addParents,!0,"Find addParents function"),c.equal(!!a().children,!0,"Find children function"),c.equal(!!a().parents,!0,"Find parents function"),c.equal(!!a().removeChildren,!0,"Find removeChildren function"),c.equal(!!a().removeParents,!0,"Find removeParents function"),c.equal(!!a().filter,!0,"Find filter function"),c.equal(!!a().nodes,!0,"Find nodes function"),a(d).addChildren(e),c.equal(d.b[0],e,"Add child (y) to parent (x) with addChildren"),c.equal(e.a[0],d,"Add parent (x) to child (y) with addChildren"),a(f).addParents(e),c.equal(e.b[0],f,"Add child (z) to parent (y) with addParents"),c.equal(f.a[0],e,"Add parent (y) to child (z) with addParents"),c.equal(a(d).children().nodes()[0],e,"Get children with children"),c.equal(a(d).children().nodes()[1],f,"Get grand-children with children"),c.equal(a(d).children(function(a){return a===e}).nodes()[0],e,"Get children with children using a filter function."),c.equal(a(f).parents().nodes()[0],e,"Get parents with parents"),c.equal(a(f).parents().nodes()[1],d,"Get grand-parents with parents"),c.equal(a(f).parents(function(a){return a===e}).nodes()[0],e,"Get parents with parents using a filter function"),c.equal(a([d,e,f]).filter().nodes()[0],d,"Return new copy of graph with filter"),c.equal(a([d,e,f]).filter(function(a){return a===e}).nodes()[0],e,"Get node with filter using a filter function"),c.equal(a(d).nodes()[0],d,"Get node with nodes"),c.equal(a([d,e,f]).nodes()[2],f,"Get nodes with nodes"),a(d).removeChildren(e),c.equal(d.b.length,0,"Remove child (y) of parent (x) with removeChildren"),c.equal(e.a.length,0,"Remove parent (x) of child (y) with removeChildren"),a(f).removeParents(e),c.equal(e.b.length,0,"Remove child (z) of parent (y) with removeParents"),c.equal(f.a.length,0,"Remove parent (y) of child (z) with removeParents"),c.result()}(this.graph,this.assert);